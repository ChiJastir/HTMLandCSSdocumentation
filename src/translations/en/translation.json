{
  "translation": {
    "settings": "Settings",
    "theme": "Theme",
    "language": "Language",
    "menuPin": "Pin the menu",


    "introductionToHTMLT": "Introduction To HTML",
    "definitionT": "Definition",
    "definitionP1": "HTML (HyperText Markup Language) it is a hypertext markup language. In simple terms, this means that it is needed to add any elements to the page. Whether it's text, pictures, buttons, input fields, etc.",
    "tagT": "Tag",
    "tagP1": "A tag is a specific element on a page. We can present our page in the browser in the form of a house, then tags are its components, such as a door, windows, walls, roof, etc. The tag looks like this:",
    "tagCon1": "Tag content",
    "tagP2": "As we can see, the tag is a kind of \"wrapper\" around the content. It consists of two parts: opening (<>) and closing (</>). But there are also single tags that close themselves:",
    "attrT": "Attribute",
    "attrP1": "Attributes can be called properties of parts of our house. For example, if it is a door, it can be an entrance or an interior, it can be metal, or it can be wooden, and so on. One tag can have as many attributes as you want. This is what the syntax looks like:",
    "doctypeT": "Doctype",
    "doctypeP1": "Any html file has a specific template, foundation that looks like this:",
    "doctypeP2": "Don't complicate your life by trying to figure it out right away. Remember - the main content of the page is written in the <body> tag, and in the <head> tag there are only a couple of tags that you may need at first",

    "tagsInHeadT": "Tags in <head>",
    "watchAndForgetT": "Watch and forget",
    "watchAndForgetP1": "I suggest you take a look at the useful tags inside the <head> tag and never come back to them again",
    "titleT": "<title>",
    "titleP1": "The content of the <title> tag is not displayed on the page. This is the text that we see at the top, next to the tab in the browser",
    "linkT": "<link>",
    "linkP1": "A multifunctional tag that serves to connect CSS styles, favicon, fonts, etc. to our page. With the rel attribute, we specify the type of the file to be connected, and href specifies a link to the file",

    "textTagsT": "Text tags",
    "headingsT": "Headings",
    "headingsP1": "There are six types of headings, from <h1> to <h6>. In practice, more than the first three or four headers are used very rarely",
    "paragraphT": "Paragraph",
    "paragraphP1": "Paragraph is a standard text element used to add plain text",
    "spanT": "<span>",
    "spanP1": "In fact, it does not represent anything. It is usually used inside another text tag to style its individual parts",
    "textLinkT": "Link",
    "textLinkP1": "The link is used to go to another site or another page of the current site. The link itself is specified in the href attribute. At the moment of development, you may need to add a link that leads nowhere. Then the href value should be specified #. It should also be noted, although we have added <a> to the text tags section, you can wrap anything inside it, for example, make a link image",

    "listsT": "Lists",
    "orderedListT": "<ol>",
    "orderedListP1": "An ordered list, aka numbered",
    "unorderedListT": "<ul>",
    "unorderedListP1": "An unordered list looks like a simple list without numbering",
    "liT": "<li>",
    "liP1": "<li> this is a list item, item",

    "blockElementsT": "Block elements",
    "blockElementsIntroductoryInformationT": "Introductory information",
    "blockElementsIntroductoryInformationP1": "By themselves, block tags are nothing of themselves. These are just containers. Nevertheless, the ability to use and combine them is critically important in the layout",
    "divT": "<div>",
    "divP1": "This is the main block element in HTML. In fact, all other block elements are copies of div, but only with semantic coloring, so that the entire site can be built using only them. But still, if possible, use its semantic versions",
    "headerT": "<header>",
    "headerP1": "The header of the page or block, the upper part. It is usually repeated on other pages of the site",
    "footerT": "<footer>",
    "footerP1": "The basement of the page or block, the lower part. It is usually repeated on other pages of the site",
    "sectionT": "<section>",
    "sectionP1": "An inseparable semantic block on the page",
    "asideT": "<aside>",
    "asideP1": "A side, separate block on the page",
    "articleT": "<article>",
    "articleP1": "Like <section>, it is a semantic block on the page, but separable",
    "mainT": "<main>",
    "mainP1": "The main essence of the page is not repeated anywhere",
    "navT": "<nav>",
    "navP1": "Site navigation. Usually contains links to other pages",

    "inputsT": "Input",
    "inputsIntroductoryInformationT": "Introductory information",
    "inputsIntroductoryInformationP1": "The <input> tag is designed to interact with the user and receive information from him. <input> can look completely different. We specify the type we need with the type attribute. The default type is text. It is also necessary to specify the name attribute for correct sending to the server",
    "valueAndPlaceholderT": "Value and placeholder attributes",
    "valueAndPlaceholderP1": "The value attribute sets the default value for the form, and placeholder gives a hint to the user what needs to be entered in the field",
    "formT": "<form>",
    "formP1": "In native HTML, all the input that we will add to the site should be in the block element <form>. This is necessary for the correct sending of data to the server",
    "inputTextT": "<input type=\"text\">",
    "inputTextP1": "Simple input string",
    "inputTextC": "Enter something",
    "inputPasswordT": "<input type=\"password\">",
    "inputPasswordP1": "A string, but with asterisks instead of letters",
    "inputPasswordC": "Enter password",
    "inputRadioT": "<input type=\"radio\">",
    "inputRadioP1": "Switches. You can choose only one option",
    "inputCheckboxT": "<input type=\"checkbox\">",
    "inputCheckboxP1": "Checkboxes. Allow you to select more than one option",
    "inputButtonT": "<input type=\"button\">",
    "inputButtonP1": "A simple button. name does not need to be specified, because this input does not contain data",
    "inputButtonC": "Just a button",
    "inputSubmitT": "<input type=\"submit\">",
    "inputSubmitP1": "The button for sending data to the server. name does not need to be specified, because this input does not contain data",

    "otherTagsT": "Other tags",
    "imgT": "<img>",
    "imgP1": "Adds a picture to the site. The src attribute specifies the path to the image, and the alt attribute specifies the text that will be shown if the image is added unsuccessfully.",
    "buttonT": "<button>",
    "buttonP1": "An advanced analog of <input type=\"button\">. Allows you to do anything with a button",

    "styleAttrsT": "Attributes for styling",
    "classT": "class",
    "classP1": "Adds a class to an element by which it can be accessed from CSS",
    "idT": "id",
    "idP1": "Adds an identifier to the element by which it can be accessed from CSS. But it's better not to do that",
    "styleT": "style",
    "styleP1": "Allows you to add styles directly to an element from HTML. It is better to try not to use",


    "selectorsT": "Selectors",
    "selectorsIntroductoryInformationT": "Introductory information",
    "selectorsIntroductoryInformationP1": "Selectors are templates that are used to bind style properties to elements in a document",
    "selectorsIntroductoryInformationP2": "All selectors have their own weight. The greater the weight, the more important the selector. There is no point in cramming the weight of each selector. Just think about which selector has the smallest selection. The smaller the sample, the greater the weight",
    "typeSelectorsT": "Type Selectors",
    "typeSelectorsP1": "Type selectors are the simplest selectors possible. Select all the elements on the page of a specific tag. Therefore they have very little weight",
    "typeSelectorsC": "Styles will be applied to all <p> on the page",
    "classSelectorsT": "Class Selectors",
    "classSelectorsP1": "Class selectors are more advanced selectors. Select all the elements on a page of a certain class. Have an average weight",
    "classSelectorsC": "Styles will be applied to all elements with the title class on the page",
    "idSelectorsT": "ID Selectors",
    "idSelectorsP1": "The ID selector selects one element on the page by a unique id. Because of such a small sample, they have a huge weight that is very difficult to beat. Using ID selectors is considered bad practice today",
    "idSelectorsC": "Styles will be applied to a single element with the button ID",
    "attributeSelectorsT": "Selectors of the presence and value of the attribute",
    "attributeSelectorsP1": "The attribute presence and value selectors select all elements by a specific attribute and its value. Very often they can be found when styling input",
    "attributeSelectorsC": "Styles will be applied to all inputs on the page for which the type=\"radio\" attribute is set",
    "universalSelectorT": "Universal selector",
    "universalSelectorP1": "The universal selector adds styles to all elements on the page",
    "universalSelectorC": "Styles will be applied to all elements on the page",
    "neighboringRelatedCombinatorT": "Neighboring related combinator",
    "neighboringRelatedCombinatorP1": "Looks like selector1 + selector2. Styles will be applied to all elements passing selector2 selection, before which there is an element passing selector1 selection in the DOM tree. It can often be found when styling lists",
    "neighboringRelatedCombinatorC": "Styles will be applied to all <li> tags that have another tag before them",
    "childCombinatorT": "Child Combinator",
    "childCombinatorP1": "Looks like selector1 > selector2. Styles will be applied to all elements passing selector2 selection, which are direct descendants of elements passing selector1 selection. It occurs infrequently",
    "childCombinatorC": "Styles will be applied to all <p> tags that are children of the first level of elements with the container class",
    "commonRelatedCombinatorT": "A common related combinator",
    "commonRelatedCombinatorP1": "Looks like selector1 ~ selector2. Styles will be applied to all elements passing selector2 selection, before which there is an element passing selector1 selection in the DOM tree. Both elements must belong to the same parent. This selector differs from the neighboring selector in that there may be other elements between selector1 and selector2. It occurs infrequently",
    "commonRelatedCombinatorC": "Styles will be applied to all <p> tags except the first, which are children of the first level of elements with the container class",
    "descendantCombinatorT": "Descendant Combinator",
    "descendantCombinatorP1": "Looks like selector1 selector2. Finds all the corresponding selector2 descendants of the element that fits selector1, and applies styles to them. Used everywhere",
    "descendantCombinatorC": "Styles will be applied to all <p> tags inside <div> tags",

    "measurementUnitsT": "Units of measurement",
    "pixelsT": "Pixels",
    "pixelsP1": "px is the most common unit of measurement that determines the size of elements on the screen. One pixel represents the smallest single point on the screen",
    "percentsT": "Percentages",
    "percentsP1": "% - used to determine the size of elements relative to the size of the parent element or container",
    "emAndRemT": "em and rem",
    "emAndRemP1": "em is a relative unit of measurement that depends on the font size of the parent element. The value of 1em is equal to the current font size. rem is similar to the EM unit of measurement, but the value of 1 rem is always equal to the font size of the root element (usually <html>)",
    "viewportT": "Viewport",
    "viewportP1": "vw and vh are relative units of measurement, which are determined relative to the size of the visible area (viewport) of the browser. 1vw is equal to 1% of the width of the visible area, and 1vh is equal to 1% of the height of the visible area",

    "pseudoClassesT": "Pseudo-classes",
    "pseudoClassesIntroductoryInformationT": "Introductory information",
    "pseudoClassesIntroductoryInformationP1": "A pseudo—class in CSS is a keyword added to a selector that defines its special state",
    "hoverP1": ":hover is applied to an element when the mouse cursor hovers over it",
    "hoverC": "Styles will be applied to the <button> when the mouse hovers over it",
    "activeP1": ":active is applied to the element while clicking on it",
    "activeC": "Styles will be applied to the <button> when you click on it",
    "focusP1": ":focus is applied to the element that is in focus (for example, when clicking on a text field)",
    "focusC": "Styles will be applied to the <button> in focus (for example, selecting a button via Tab)",
    "visitedP1": ":visited applies to visited links",
    "visitedC": "Styles will be applied to all visited links",

    "pseudoElementsT": "Pseudo-elements",
    "pseudoElementsIntroductoryInformationT": "Introductory information",
    "pseudoElementsIntroductoryInformationP1": "A pseudo-element in CSS is a keyword added to a selector that allows you to style a certain part of the selected element",
    "beforeP1": "::before adds content before the content of the selected element. Works in conjunction with the content property",
    "beforeC": "A dollar sign will be displayed before the list items",
    "afterP1": "::after adds content after the content of the selected item. Works in conjunction with the content property",
    "afterC": "The ampersand sign will be displayed after the list items",
    "placeholderP1": "::placeholder is applied to a placeholder inside a text field or a text field with a mask",
    "placeholderC": "Styles will be applied to the placeholder of all <input> c type=\"text\"",

    "mathematicsT": "Mathematics",
    "calcP1": "calc() allows you to add the simplest mathematics to the site. We can add(+), subtract(-), multiply(*) and divide(/) different units of measurement. In all other mathematical functions we can also use these operators",
    "minAndMaxT": "min and max",
    "minAndMaxP1": "min(a, b) and max(a, b) selects the minimum and maximum of the two values, respectively. They are important knowledge in adaptive layout",
    "clampP1": "clamp(a, b, c) can be represented as a desired value bounded by a minimum and maximum value. It is also an extremely necessary thing when building an adaptive",

    "sizesT": "Sizes",
    "heightAndWidthT": "height and width",
    "heightAndWidthP1": "Obviously",
    "maxHeightMinHeightAndMaxWidthMinWidthT": "max-height, min-height and max-width, min-width",
    "maxHeightMinHeightAndMaxWidthMinWidthP1": "Logically, the values of the maximum /minimum height / width",

    "textT": "Text",
    "fontFamilyP1": "font-family sets the font of the text. It is possible to specify several values, fonts at the beginning have a higher priority. There are also standard serif and sans-serif values, which are guaranteed to be available on all devices.",
    "fontSizeP1": "font-size sets the font size",
    "fontWeightP1": "font-weight determines the font thickness. You can specify the value with the words normal, bold, etc. But I prefer to use numeric values: 100, 200, 300...900. From 100 to 900 in increments of a hundred. You do not need to specify the units of measurement. It should also be noted that not all fonts have typefaces of all types",
    "textAlignP1": "text-align is the alignment of the text along one of the edges. For a happy life, it is enough to know left, right, center and justify",
    "textShadowP1": "text-shadow adds a shadow to the text. The color and three numeric values are specified in order: X-shift, Y-shift, and the degree of blur",
    "textDecorationP1": "text-decoration underlines(underline), crosses out(line-through) or crosses out (overline) text",

    "colorAndBackgroundT": "Color and background",
    "colorIndicationFormatsT": "Color indication formats",
    "colorIndicationFormatsP1": "Named colors are predefined color names such as \"red\", \"blue\", \"green\", etc.",
    "colorIndicationFormatsP2": "HEX codes are a hexadecimal representation of a color consisting of the characters 0-9 and A-F. For example, \"#FF0000\" represents red",
    "colorIndicationFormatsP3": "RGB is a representation of a color as a combination of the values of the red (R), green (G) and blue (B) components. For example, \"rgb(255, 0, 0)\" represents red.",
    "colorIndicationFormatsP4": "RGBA - similar to RGB, but with the addition of an alpha channel that determines the transparency of the color. For example, \"rgba(255, 0, 0, 0.5)\" represents a translucent red color.",
    "colorIndicationFormatsP5": "CSS3 color functions - CSS3 provides functions for creating colors, such as linear-gradient() and radial-gradient(). These functions allow you to create gradients and other complex color effects.",
    "colorP1": "color sets the color for the text",
    "backgroundColorP1": "background-color sets the color for the element's background",
    "backgroundImageP1": "background-image sets the background image for the element via url(\"URL\")",
    "backgroundAttachmentP1": "background-attachment sets whether the background image will scroll along with the content of the element",
    "backgroundRepeatP1": "background-repeat sets the way the background repeats. The main values are repeat, round and no-repeat",
    "backgroundSizeP1": "background-size sets the size of the background. The main values are: contain, cover and an arbitrary value",
    "backgroundPositionP1": "background-position sets the position of the background. The values can be specified in words, or they can be arbitrary",

    "displayFlexP1": "display: flex allows you to make elements in the block streamlined, and also gives access to other flex properties. For comparison, the standard value is block",
    "flexDirectionP1": "Using flex-direction, we can specify the direction of stacking elements",
    "flexWrapP1": "flex-wrap is responsible for transferring elements",
    "justifyContentP1": "justify-content is responsible for placing elements in the block. The most commonly used values are center, space-between and space-around",

    "displayGridT1": "display: grid, grid-template-columns, grid-template-rows and unit of measurement fr",
    "displayGridP1": "display: grid behaves like display: block, but opens access to interesting CSS properties that allow you to create a grid on the page, as well as to the unit of measurement fr. fr can be conditionally called a \"part\". The record repeat(3, 1fr) means \"divide the block into 3 equal parts\". repeat(5, 1fr) respectively \"divide the block into 5 equal parts\". 30% 60% 1fr knows that all available space is divided into 3 unequal parts. One part takes 30%, the second part 60%, and the third is what remains. In this example, it is 10%.",
    "displayGridP2": "grid-template-columns and grid-template-rows respectively mean division into columns and rows. It turns out something like a table",
    "gridAreasT": "grid-template-areas and grid-area",
    "gridAreasP1": "grid-template-areas is a common property for columns and rows. It has a specific syntax, but allows you to set a non-standard grid. Grid-area is used for marking grid elements",
    "gapP1": "gap is the gaps between the grid elements, but they do not always work the way we want",

    "displayNoneP1": "display: none completely removes the block from the page as if it does not exist",
    "displayNoneC": "Pressing the button adds and removes display: none",
    "displayNoneB1": "Hide/Show",
    "displayBlockP1": "display: block is the default display value. Nothing interesting",

    "positionP1": "position sets the way the element is positioned relative to the browser window or other objects on the web page. The default value is static. The most common values are absolute, relative and fixed. All of them open new properties left, top, right and bottom. This is a kind of indentation from a certain side. The value of position depends on what the margins will be relative to",
    "positionAbsoluteP1": "absolute - margins relative to the origin on the page (upper-left corner), but if you put such an element inside the relative element, the positioning will occur relative to the parent element. In addition, the element with position: absolute becomes incorporeal and intangible",
    "positionRelativeP1": "relative - margins relative to itself. The element does not become disembodied, but its body does not move",
    "positionFixedP1": "fixed - similar to absolute, but anchored to a specific position on the screen",

    "transformP1": "transform is an extensive CSS property that includes a lot of values that allow you to move the element, rotate, scale, and so on. But there are only a few common ones: translate(x, y), rotate(deg) and scale(x, y). There are also derivatives of them: translateX(x), translateY(y), scaleX(x), and so on. The remaining values are almost not used",
    "transformTranslateP1": "transform:translate() is essentially very similar to position: relative. It also allows us to shift elements relative to ourselves",
    "transformRotateP1": "transform:rotate() allows us to rotate elements on the page",
    "transformScaleP1": "transform: scale() changes the size of the element along the axes",

    "animationT": "Animation",
    "transitionP1": "transition allows you to add a smooth change to the CSS property. The required property is specified (you can specify all), as well as the time in milliseconds or seconds. You can specify the delay before the animation starts and the animation curve",
    "keyframesAndAnimationT": "@keyframes and animation",
    "keyframesAndAnimationP1": "@keyframes allows us to create an animation using keyframes and give it a name. Keyframes are set as percentages of the animation. With animation, we apply the created animation and specify additional parameters, such as time, delay, animation curve, repeatability, etc.",
    "keyframesAndAnimationP2": "For the sake of interest, the gradient is implemented like this:",

    "framesT": "Frames",
    "borderP1": "border adds a tangible frame to the element that is part of it. The thickness of the frame, color and style of the frame are specified. In 90% of cases, a solid solid frame is sufficient",
    "outlineP1": "outline adds an intangible frame to an element that is not part of it. The thickness of the frame, color and style of the frame are specified. In 90% of cases, a solid solid frame is sufficient",
    "borderRadiusP1": "border-radius rounds the edges of the element",

    "indentsT": "Indents",
    "paddingP1": "padding adds internal padding to an element",
    "marginP1": "margin adds external margins for the element",
    "marginP2": "The auto value can be used as a centering method",

    "otherT": "Other",
    "zIndexP1": "z-index is an analogue of layers in Photoshop. The higher the value, the higher the layer",
    "zIndexC": "The buttons change the value",
    "boxShadowP1": "box-shadow is a copy of text-shadow, but for block elements",
    "opacityP1": "",
    "alignItemsP1": "align-items aligns the items in the block. Usually only center is used",
    "cursorP1": "cursor indicates the type of mouse pointer when hovering",
    "visibilityP1": "visibility: hidden hides an element on the page, but the space occupied by it remains occupied. It is possible to animate",
    "listStyle": "list-style adjusts the style of the list pointers. You can choose from a variety of existing ones, or you can specify yourself"
  }
}